<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Z80 instruction set - ClrHome</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
      body > div {
        width: 960px;
        margin: 0 auto 200px auto;
        font-family: Verdana;
        font-size: 24px;
      }
      form {
        margin-top: 2em;
        font-size: 0.6em;
      }
      form span {
        display: inline-block;
        position: relative;
        top: -0.5em;
      }
      #search {
        font-size: 1em;
        font-family: Verdana;
        width: 640px;
      }
      h3, p {
        text-align: center;
      }
      table {
        table-layout: fixed;
        width: 960px;
      }
      table, .tooltip {
        font-size: 0.5em;
      }
      th {
        color: #999;
      }
      tr:first-child {
        height: 2em;
      }
      td {
        font-family: "Courier New", Courier;
        font-weight: bold;
        background-color: #ccc;
        color: #333;
        padding: 6px;
        word-wrap: break-word;
      }
      .un {
        background-color: #f66;
      }
      .ln {
        padding: 0;
      }
      .hr {
        background-color: #000;
        color: #666;
      }
      th, .bk {
        background-color: #333;
      }
      .hd, td:hover, td a {
        background-color: #999;
        color: #000;
      }
      td:first-child {
        width: 1em;
        background-color: transparent;
      }
      td a {
        display: block;
        padding: 6px;
        font-family: Verdana;
        text-align: center;
      }
      td a:hover, .tooltip {
        background-color: #fff;
        text-decoration: none;
      }
      .tooltip {
        position: absolute;
        width: 160px;
        border: 3px solid #000;
        padding: 6px;
      }
      #banner {
        position: fixed;
        top: 0;
        right: 50%;
        z-index: 9;
        width: 200px;
        margin-right: -420px;
        font-family: 'Times New Roman', Times, serif;
      }
      #banner > a {
        display: block;
        border: 2px solid #aa8;
        border-top: 0;
        padding: 8px 4px;
        background: #cca;
        color: #331;
        text-decoration: none;
        text-align: center;
        font-style: italic;
        -webkit-transition: background-color 200ms;
        -o-transition: background-color 200ms;
        -ms-transition: background-color 200ms;
        -moz-transition: background-color 200ms;
        transition: background-color 200ms;
      }
      #banner > a:hover {
        background: #eec;
      }
      #banner span {
        display: block;
        font-size: 0.6em;
      }
      #banner img {
        display: block;
        width: 100%;
        border: 0;
      }
      #banner cite {
        display: block;
        padding: 4px 8px;
        background: #aa8;
        color: #ddc;
        font-style: normal;
      }
      #banner cite img {
        float: right;
        width: 96px;
        opacity: 0.4;
        -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=40)';
        filter: alpha(opacity=40);
        -webkit-transition: opacity 200ms;
        -o-transition: opacity 200ms;
        -ms-transition: opacity 200ms;
        -moz-transition: opacity 200ms;
        transition: opacity 200ms;
      }
      #banner cite a:hover img {
        opacity: 0.1;
        -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=10)';
        filter: alpha(opacity=10);
      }
    </style>
<link rel="shortcut icon" href="/favicon.ico" />
<script type="text/javascript" src="/lib/js/jquery.js"></script>
<script type="text/javascript" src="/lib/js/ga.js"></script>
<script type="text/javascript">// <![CDATA[
      function rehash() {
        window.location.hash = $('#search').val();
      }

      function hashchange() {
        var hash = window.decodeURIComponent(window.location.hash).slice(1);

        if (hash != $('#search').val()) {
          $('#search').val(hash);
        }

        $('td').each(function() {
          if ($(this).text().indexOf(hash) == -1) {
            $(this).addClass('bk');
          } else {
            $(this).removeClass('bk');
          }
        });
      }

      function detip() {
        $('.tooltip').remove();
      }

      $(function() {
        var keyup = 0;

        $('th').hover(function() {
          $(this).addClass('hr');
          ($(this).index() ? $(this).parent().parent().find('td:nth-child(' + ($(this).index() + 1).toString() + ')') : $(this).siblings()).addClass('hd');
        }, function() {
          $(this).removeClass('hr');
          ($(this).index() ? $(this).parent().parent().find('td:nth-child(' + ($(this).index() + 1).toString() + ')') : $(this).siblings()).removeClass('hd');
        });

        $('#search').keyup(function(e) {
          clearTimeout(keyup);
          keyup = setTimeout(rehash, 400);
        });

        $('a').click(function() {
          $(window).scrollTop($($(this).attr('href')).position().top);
          return false;
        });

        $('td:not(:has(\'a\')):not(:first-child)').mouseover(function(e) {
          var desc = '';
          var val = $(this).attr('axis').split('|');
          var flags = ['C', 'N', 'P/V', 'H', 'Z', 'S'];

          for (i = 0; i < 6; i++) {
            desc += '<br><b>' + flags[i] + ':</b> ';

            switch (val[0].charAt(i)) {
              case '-':
                desc += 'unaffected';
                break;
              case '+':
                desc += 'affected as defined';
                break;
              case 'P':
                desc += 'detects parity';
                break;
              case 'V':
                desc += 'detects overflow';
                break;
              case '1':
                desc += 'set';
                break;
              case '0':
                desc += 'reset';
                break;
              case '*':
                desc += 'exceptional';
                break;
              default:
                desc += 'unknown';
            }
          }

          detip();
          $('<div class="tooltip"><b>Opcode:</b> ' + $(this).closest('table').attr('title') + '0123456789ABCDEF'.charAt($(this).parent().index() - 1) + '0123456789ABCDEF'.charAt($(this).index() - 1) + '<br><b>Size (bytes):</b> ' + val[1] + '<br><b>Time (clock cycles):</b> ' + val[2] + desc + '<br>' + val[3] + '</div>').css({'left': e.pageX + 10, 'top': e.pageY + 20}).appendTo('body > div');
        }).mousemove(function(e) {
          $('.tooltip').css({'left': e.pageX + 10, 'top': e.pageY + 20});
        });

        $('#banner').mouseenter(function() {
          $(this).stop().animate({top: 0});
        }).mouseleave(function() {
          $(this).stop().animate({top: -120});
        });

        $(window).keydown(function(e) {
          if (e.keyCode == 191) {
            $('#search').focus().select();
            return false;
          }
        });

        $('table').mouseout(detip);
        window.onhashchange = hashchange;
        hashchange();
      });
    // ]]></script>
</head>
<body>
<div>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<div>
<span>Your contributions help keep our services running!</span>
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----" />
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</div>
</form>
<p>Type here to search: <input type="text" id="search" /></p>
<h3 id="table1">Main instructions</h3>
<table title="">
<tr>
<td></td>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
</tr>
<tr>
<th>0</th>
<td axis="------|1|4|No operation is performed.">nop</td>
<td axis="------|3|12|Loads ** into bc.">ld bc,**</td>
<td axis="------|1|8|Stores a into the memory location pointed to by bc.">ld (bc),a</td>
<td axis="------|1|8|Adds one to bc.">inc bc</td>
<td axis="-+V+++|1|4|Adds one to b.">inc b</td>
<td axis="-+V+++|1|4|Subtracts one from b.">dec b</td>
<td axis="------|2|8|Loads * into b.">ld b,*</td>
<td axis="+0-0--|1|4|The contents of a are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlca</td>
<td axis="------|3|20|Loads ** into sp.">ld (**),sp</td>
<td axis="++-+--|1|8|The value of bc is added to hl.">add hl,bc</td>
<td axis="------|1|8|Loads the value pointed to by bc into a.">ld a,(bc)</td>
<td axis="------|1|8|Subtracts one from bc.">dec bc</td>
<td axis="-+V+++|1|4|Adds one to c.">inc c</td>
<td axis="-+V+++|1|4|Subtracts one from c.">dec c</td>
<td axis="------|2|8|Loads * into c.">ld c,*</td>
<td axis="+0-0--|1|4|The contents of a are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrca</td>
</tr>
<tr>
<th>1</th>
<td axis="------|2|4|Halt CPU & LCD display until button pressed.">stop</td>
<td axis="------|3|12|Loads ** into de.">ld de,**</td>
<td axis="------|1|8|Stores a into the memory location pointed to by de.">ld (de),a</td>
<td axis="------|1|8|Adds one to de.">inc de</td>
<td axis="-+V+++|1|4|Adds one to d.">inc d</td>
<td axis="-+V+++|1|4|Subtracts one from d.">dec d</td>
<td axis="------|2|8|Loads * into d.">ld d,*</td>
<td axis="+0-0--|1|4|The contents of a are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rla</td>
<td axis="------|2|8|The signed value * is added to pc. The jump is measured from the start of the instruction opcode.">jr *</td>
<td axis="++-+--|1|8|The value of de is added to hl.">add hl,de</td>
<td axis="------|1|8|Loads the value pointed to by de into a.">ld a,(de)</td>
<td axis="------|1|8|Subtracts one from de.">dec de</td>
<td axis="-+V+++|1|4|Adds one to e.">inc e</td>
<td axis="-+V+++|1|4|Subtracts one from e.">dec e</td>
<td axis="------|2|8|Loads * into e.">ld e,*</td>
<td axis="+0-0--|1|4|The contents of a are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rra</td>
</tr>
<tr>
<th>2</th>
<td axis="------|2|8|If condition cc is true, the signed value * is added to pc. The jump is measured from the start of the instruction opcode.">jr nz,*</td>
<td axis="------|3|12|Loads ** into hl.">ld hl,**</td>
<td axis="------|3|8|Put a into memory location pointed to by hl. Increment hl.">ldi (hl),a</td>
<td axis="------|1|8|Adds one to hl.">inc hl</td>
<td axis="-+V+++|1|4|Adds one to h.">inc h</td>
<td axis="-+V+++|1|4|Subtracts one from h.">dec h</td>
<td axis="------|2|8|Loads * into h.">ld h,*</td>
<td axis="*-P*++|1|4|Adjusts a for BCD addition and subtraction operations.">daa</td>
<td axis="------|2|8|If condition cc is true, the signed value * is added to pc. The jump is measured from the start of the instruction opcode.">jr z,*</td>
<td axis="++-+--|1|8|The value of hl is added to hl.">add hl,hl</td>
<td axis="------|3|8|Put the value at adress hl into a. Increment hl.">ldi a,(hl)</td>
<td axis="------|1|8|Subtracts one from hl.">dec hl</td>
<td axis="-+V+++|1|4|Adds one to l.">inc l</td>
<td axis="-+V+++|1|4|Subtracts one from l.">dec l</td>
<td axis="------|2|8|Loads * into l.">ld l,*</td>
<td axis="-1-1--|1|4|The contents of a are inverted (one's complement).">cpl</td>
</tr>
<tr>
<th>3</th>
<td axis="------|2|8|If condition cc is true, the signed value * is added to pc. The jump is measured from the start of the instruction opcode.">jr nc,*</td>
<td axis="------|3|12|Loads ** into sp.">ld sp,**</td>
<td axis="------|3|8|Put a into memory adress hl. Decrement hl.">ldd (hl),a</td>
<td axis="------|1|8|Adds one to sp.">inc sp</td>
<td axis="-+V+++|1|12|Adds one to (hl).">inc (hl)</td>
<td axis="-+V+++|1|12|Subtracts one from (hl).">dec (hl)</td>
<td axis="------|2|12|Loads * into (hl).">ld (hl),*</td>
<td axis="10-0--|1|4|Sets the carry flag.">scf</td>
<td axis="------|2|8|If condition cc is true, the signed value * is added to pc. The jump is measured from the start of the instruction opcode.">jr c,*</td>
<td axis="++-+--|1|8|The value of hl is added to hl.">add hl,sp</td>
<td axis="------|3|8|Put value at adress hl into a. Decrement hl.">ldd a,(hl)</td>
<td axis="------|1|8|Subtracts one from sp.">dec sp</td>
<td axis="-+V+++|1|4|Adds one to a.">inc a</td>
<td axis="-+V+++|1|4|Subtracts one from a.">dec a</td>
<td axis="------|2|8|Loads * into a.">ld a,*</td>
<td axis="*0-*--|1|4|Inverts the carry flag.">ccf</td>
</tr>
<tr>
<th>4</th>
<td axis="------|1|4|The contents of b are loaded into b.">ld b,b</td>
<td axis="------|1|4|The contents of c are loaded into b.">ld b,c</td>
<td axis="------|1|4|The contents of d are loaded into b.">ld b,d</td>
<td axis="------|1|4|The contents of e are loaded into b.">ld b,e</td>
<td axis="------|1|4|The contents of h are loaded into b.">ld b,h</td>
<td axis="------|1|4|The contents of l are loaded into b.">ld b,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into b.">ld b,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into b.">ld b,a</td>
<td axis="------|1|4|The contents of b are loaded into c.">ld c,b</td>
<td axis="------|1|4|The contents of c are loaded into c.">ld c,c</td>
<td axis="------|1|4|The contents of d are loaded into c.">ld c,d</td>
<td axis="------|1|4|The contents of e are loaded into c.">ld c,e</td>
<td axis="------|1|4|The contents of h are loaded into c.">ld c,h</td>
<td axis="------|1|4|The contents of l are loaded into c.">ld c,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into c.">ld c,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into c.">ld c,a</td>
</tr>
<tr>
<th>5</th>
<td axis="------|1|4|The contents of b are loaded into d.">ld d,b</td>
<td axis="------|1|4|The contents of c are loaded into d.">ld d,c</td>
<td axis="------|1|4|The contents of d are loaded into d.">ld d,d</td>
<td axis="------|1|4|The contents of e are loaded into d.">ld d,e</td>
<td axis="------|1|4|The contents of h are loaded into d.">ld d,h</td>
<td axis="------|1|4|The contents of l are loaded into d.">ld d,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into d.">ld d,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into d.">ld d,a</td>
<td axis="------|1|4|The contents of b are loaded into e.">ld e,b</td>
<td axis="------|1|4|The contents of c are loaded into e.">ld e,c</td>
<td axis="------|1|4|The contents of d are loaded into e.">ld e,d</td>
<td axis="------|1|4|The contents of e are loaded into e.">ld e,e</td>
<td axis="------|1|4|The contents of h are loaded into e.">ld e,h</td>
<td axis="------|1|4|The contents of l are loaded into e.">ld e,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into e.">ld e,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into e.">ld e,a</td>
</tr>
<tr>
<th>6</th>
<td axis="------|1|4|The contents of b are loaded into h.">ld h,b</td>
<td axis="------|1|4|The contents of c are loaded into h.">ld h,c</td>
<td axis="------|1|4|The contents of d are loaded into h.">ld h,d</td>
<td axis="------|1|4|The contents of e are loaded into h.">ld h,e</td>
<td axis="------|1|4|The contents of h are loaded into h.">ld h,h</td>
<td axis="------|1|4|The contents of l are loaded into h.">ld h,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into h.">ld h,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into h.">ld h,a</td>
<td axis="------|1|4|The contents of b are loaded into l.">ld l,b</td>
<td axis="------|1|4|The contents of c are loaded into l.">ld l,c</td>
<td axis="------|1|4|The contents of d are loaded into l.">ld l,d</td>
<td axis="------|1|4|The contents of e are loaded into l.">ld l,e</td>
<td axis="------|1|4|The contents of h are loaded into l.">ld l,h</td>
<td axis="------|1|4|The contents of l are loaded into l.">ld l,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into l.">ld l,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into l.">ld l,a</td>
</tr>
<tr>
<th>7</th>
<td axis="------|1|8|The contents of b are loaded into (hl).">ld (hl),b</td>
<td axis="------|1|8|The contents of c are loaded into (hl).">ld (hl),c</td>
<td axis="------|1|8|The contents of d are loaded into (hl).">ld (hl),d</td>
<td axis="------|1|8|The contents of e are loaded into (hl).">ld (hl),e</td>
<td axis="------|1|8|The contents of h are loaded into (hl).">ld (hl),h</td>
<td axis="------|1|8|The contents of l are loaded into (hl).">ld (hl),l</td>
<td axis="------|1|4|Suspends CPU operation until an interrupt or reset occurs.">halt</td>
<td axis="------|1|8|The contents of a are loaded into (hl).">ld (hl),a</td>
<td axis="------|1|4|The contents of b are loaded into a.">ld a,b</td>
<td axis="------|1|4|The contents of c are loaded into a.">ld a,c</td>
<td axis="------|1|4|The contents of d are loaded into a.">ld a,d</td>
<td axis="------|1|4|The contents of e are loaded into a.">ld a,e</td>
<td axis="------|1|4|The contents of h are loaded into a.">ld a,h</td>
<td axis="------|1|4|The contents of l are loaded into a.">ld a,l</td>
<td axis="------|1|8|The contents of (hl) are loaded into a.">ld a,(hl)</td>
<td axis="------|1|4|The contents of a are loaded into a.">ld a,a</td>
</tr>
<tr>
<th>8</th>
<td axis="++V+++|1|4|Adds b to a.">add a,b</td>
<td axis="++V+++|1|4|Adds c to a.">add a,c</td>
<td axis="++V+++|1|4|Adds d to a.">add a,d</td>
<td axis="++V+++|1|4|Adds e to a.">add a,e</td>
<td axis="++V+++|1|4|Adds h to a.">add a,h</td>
<td axis="++V+++|1|4|Adds l to a.">add a,l</td>
<td axis="++V+++|1|8|Adds (hl) to a.">add a,(hl)</td>
<td axis="++V+++|1|4|Adds a to a.">add a,a</td>
<td axis="++V+++|1|4|Adds b and the carry flag to a.">adc a,b</td>
<td axis="++V+++|1|4|Adds c and the carry flag to a.">adc a,c</td>
<td axis="++V+++|1|4|Adds d and the carry flag to a.">adc a,d</td>
<td axis="++V+++|1|4|Adds e and the carry flag to a.">adc a,e</td>
<td axis="++V+++|1|4|Adds h and the carry flag to a.">adc a,h</td>
<td axis="++V+++|1|4|Adds l and the carry flag to a.">adc a,l</td>
<td axis="++V+++|1|8|Adds (hl) and the carry flag to a.">adc a,(hl)</td>
<td axis="++V+++|1|4|Adds a and the carry flag to a.">adc a,a</td>
</tr>
<tr>
<th>9</th>
<td axis="++V+++|1|4|Subtracts b from a.">sub b</td>
<td axis="++V+++|1|4|Subtracts c from a.">sub c</td>
<td axis="++V+++|1|4|Subtracts d from a.">sub d</td>
<td axis="++V+++|1|4|Subtracts e from a.">sub e</td>
<td axis="++V+++|1|4|Subtracts h from a.">sub h</td>
<td axis="++V+++|1|4|Subtracts l from a.">sub l</td>
<td axis="++V+++|1|8|Subtracts (hl) from a.">sub (hl)</td>
<td axis="++V+++|1|4|Subtracts a from a.">sub a</td>
<td axis="++V+++|1|4|Subtracts b and the carry flag from a.">sbc a,b</td>
<td axis="++V+++|1|4|Subtracts c and the carry flag from a.">sbc a,c</td>
<td axis="++V+++|1|4|Subtracts d and the carry flag from a.">sbc a,d</td>
<td axis="++V+++|1|4|Subtracts e and the carry flag from a.">sbc a,e</td>
<td axis="++V+++|1|4|Subtracts h and the carry flag from a.">sbc a,h</td>
<td axis="++V+++|1|4|Subtracts l and the carry flag from a.">sbc a,l</td>
<td axis="++V+++|1|8|Subtracts (hl) and the carry flag from a.">sbc a,(hl)</td>
<td axis="++V+++|1|4|Subtracts a and the carry flag from a.">sbc a,a</td>
</tr>
<tr>
<th>A</th>
<td axis="00P1++|1|4|Bitwise AND on a with b.">and b</td>
<td axis="00P1++|1|4|Bitwise AND on a with c.">and c</td>
<td axis="00P1++|1|4|Bitwise AND on a with d.">and d</td>
<td axis="00P1++|1|4|Bitwise AND on a with e.">and e</td>
<td axis="00P1++|1|4|Bitwise AND on a with h.">and h</td>
<td axis="00P1++|1|4|Bitwise AND on a with l.">and l</td>
<td axis="00P1++|1|8|Bitwise AND on a with (hl).">and (hl)</td>
<td axis="00P1++|1|4|Bitwise AND on a with a.">and a</td>
<td axis="00P0++|1|4|Bitwise XOR on a with b.">xor b</td>
<td axis="00P0++|1|4|Bitwise XOR on a with c.">xor c</td>
 <td axis="00P0++|1|4|Bitwise XOR on a with d.">xor d</td>
<td axis="00P0++|1|4|Bitwise XOR on a with e.">xor e</td>
<td axis="00P0++|1|4|Bitwise XOR on a with h.">xor h</td>
<td axis="00P0++|1|4|Bitwise XOR on a with l.">xor l</td>
<td axis="00P0++|1|8|Bitwise XOR on a with (hl).">xor (hl)</td>
<td axis="00P0++|1|4|Bitwise XOR on a with a.">xor a</td>
</tr>
<tr>
<th>B</th>
<td axis="00P0++|1|4|Bitwise OR on a with b.">or b</td>
<td axis="00P0++|1|4|Bitwise OR on a with c.">or c</td>
<td axis="00P0++|1|4|Bitwise OR on a with d.">or d</td>
<td axis="00P0++|1|4|Bitwise OR on a with e.">or e</td>
<td axis="00P0++|1|4|Bitwise OR on a with h.">or h</td>
<td axis="00P0++|1|4|Bitwise OR on a with l.">or l</td>
<td axis="00P0++|1|8|Bitwise OR on a with (hl).">or (hl)</td>
<td axis="00P0++|1|4|Bitwise OR on a with a.">or a</td>
<td axis="++V+++|1|4|Subtracts b from a and affects flags according to the result. a is not modified.">cp b</td>
<td axis="++V+++|1|4|Subtracts c from a and affects flags according to the result. a is not modified.">cp c</td>
<td axis="++V+++|1|4|Subtracts d from a and affects flags according to the result. a is not modified.">cp d</td>
<td axis="++V+++|1|4|Subtracts e from a and affects flags according to the result. a is not modified.">cp e</td>
<td axis="++V+++|1|4|Subtracts h from a and affects flags according to the result. a is not modified.">cp h</td>
<td axis="++V+++|1|4|Subtracts l from a and affects flags according to the result. a is not modified.">cp l</td>
<td axis="++V+++|1|8|Subtracts (hl) from a and affects flags according to the result. a is not modified.">cp (hl)</td>
<td axis="++V+++|1|4|Subtracts a from a and affects flags according to the result. a is not modified.">cp a</td>
</tr>
<tr>
<th>C</th>
<td axis="------|1|8|If condition cc is true, the top stack entry is popped into pc.">ret nz</td>
<td axis="------|1|12|The memory location pointed to by sp is stored into c and sp is incremented. The memory location pointed to by sp is stored into b and sp is incremented again.">pop bc</td>
<td axis="------|3|12|If condition cc is true, ** is copied to pc.">jp nz,**</td>
<td axis="------|3|12|** is copied to pc.">jp **</td>
<td axis="------|3|12|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call nz,**</td>
<td axis="------|1|12|sp is decremented and b is stored into the memory location pointed to by sp. sp is decremented again and c is stored into the memory location pointed to by sp.">push bc</td>
<td axis="++V+++|2|8|Adds * to a.">add a,*</td>
<td axis="------|1|32|The current pc value plus one is pushed onto the stack, then is loaded with 00h.">rst 00h</td>
<td axis="------|1|8|If condition cc is true, the top stack entry is popped into pc.">ret z</td>
<td axis="------|1|8|The top stack entry is popped into pc.">ret</td>
<td axis="------|3|12|If condition cc is true, ** is copied to pc.">jp z,**</td>
<td class="ln">
<a href="#table3">BITS</a>
</td>
<td axis="------|3|12|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call z,**</td>
<td axis="------|3|12|Push address of next instruction onto the stack and then jump to address **.">call **</td>
<td axis="++V+++|2|8|Adds * and the carry flag to a.">adc a,*</td>
<td axis="------|1|32|The current pc value plus one is pushed onto the stack, then is loaded with 08h.">rst 08h</td>
</tr>
<tr>
<th>D</th>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret nc</td>
<td axis="------|1|10|The memory location pointed to by sp is stored into e and sp is incremented. The memory location pointed to by sp is stored into d and sp is incremented again.">pop de</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp nc,**</td>
<td axis="------|2|11|The value of a is written to port *.">out (*),a</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call nc,**</td>
<td axis="------|1|11|sp is decremented and d is stored into the memory location pointed to by sp. sp is decremented again and e is stored into the memory location pointed to by sp.">push de</td>
<td axis="++V+++|2|7|Subtracts * from a.">sub *</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 10h.">rst 10h</td>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret c</td>
<td axis="------|1|4|Exchanges the 16-bit contents of bc, de, and hl with bc', de', and hl'.">exx</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp c,**</td>
<td axis="------|2|11|A byte from port * is written to a.">in a,(*)</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call c,**</td>
<td class="ln">
<a href="#table4">IX</a>
</td>
<td axis="++V+++|2|7|Subtracts * and the carry flag from a.">sbc a,*</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 18h.">rst 18h</td>
</tr>
<tr>
<th>E</th>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret po</td>
<td axis="------|1|10|The memory location pointed to by sp is stored into l and sp is incremented. The memory location pointed to by sp is stored into h and sp is incremented again.">pop hl</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp po,**</td>
<td axis="------|1|19|Exchanges (sp) with l, and (sp+1) with h.">ex (sp),hl</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call po,**</td>
<td axis="------|1|11|sp is decremented and h is stored into the memory location pointed to by sp. sp is decremented again and l is stored into the memory location pointed to by sp.">push hl</td>
<td axis="00P1++|2|7|Bitwise AND on a with *.">and *</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 20h.">rst 20h</td>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret pe</td>
<td axis="------|1|4|Loads the value of hl into pc.">jp (hl)</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp pe,**</td>
<td axis="------|1|4|Exchanges the 16-bit contents of de and hl.">ex de,hl</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call pe,**</td>
<td class="ln">
<a href="#table2">EXTD</a>
</td>
<td axis="00P0++|2|7|Bitwise XOR on a with *.">xor *</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 28h.">rst 28h</td>
</tr>
<tr>
<th>F</th>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret p</td>
<td axis="------|1|10|The memory location pointed to by sp is stored into f and sp is incremented. The memory location pointed to by sp is stored into a and sp is incremented again.">pop af</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp p,**</td>
<td axis="------|1|4|Resets both interrupt flip-flops, thus prenting maskable interrupts from triggering.">di</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call p,**</td>
<td axis="------|1|11|sp is decremented and a is stored into the memory location pointed to by sp. sp is decremented again and f is stored into the memory location pointed to by sp.">push af</td>
<td axis="00P0++|2|7|Bitwise OR on a with *.">or *</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 30h.">rst 30h</td>
<td axis="------|1|11/5|If condition cc is true, the top stack entry is popped into pc.">ret m</td>
<td axis="------|1|6|Loads the value of hl into sp.">ld sp,hl</td>
<td axis="------|3|10|If condition cc is true, ** is copied to pc.">jp m,**</td>
<td axis="------|1|4|Sets both interrupt flip-flops, thus allowing maskable interrupts to occur. An interrupt will not occur until after the immediatedly following instruction.">ei</td>
<td axis="------|3|17/10|If condition cc is true, the current pc value plus three is pushed onto the stack, then is loaded with **.">call m,**</td>
<td class="ln">
<a href="#table6">IY</a>
</td>
<td axis="++V+++|2|7|Subtracts * from a and affects flags according to the result. a is not modified.">cp *</td>
<td axis="------|1|11|The current pc value plus one is pushed onto the stack, then is loaded with 38h.">rst 38h</td>
</tr>
</table>
<h3 id="table3">Bit instructions (CB)</h3>
<table title="CB">
<tr>
<td></td>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
</tr>
<tr>
<th>0</th>
<td axis="+0P0++|2|8|The contents of b are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc b</td>
<td axis="+0P0++|2|8|The contents of c are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc c</td>
<td axis="+0P0++|2|8|The contents of d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc d</td>
<td axis="+0P0++|2|8|The contents of e are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc e</td>
<td axis="+0P0++|2|8|The contents of h are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc h</td>
<td axis="+0P0++|2|8|The contents of l are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc l</td>
<td axis="+0P0++|2|15|The contents of (hl) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc (hl)</td>
<td axis="+0P0++|2|8|The contents of a are rotated left one bit position. The contents of bit 7 are copied to the carry flag and bit 0.">rlc a</td>
<td axis="+0P0++|2|8|The contents of b are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc b</td>
<td axis="+0P0++|2|8|The contents of c are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc c</td>
<td axis="+0P0++|2|8|The contents of d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc d</td>
<td axis="+0P0++|2|8|The contents of e are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc e</td>
<td axis="+0P0++|2|8|The contents of h are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc h</td>
<td axis="+0P0++|2|8|The contents of l are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc l</td>
<td axis="+0P0++|2|15|The contents of (hl) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc (hl)</td>
<td axis="+0P0++|2|8|The contents of a are rotated right one bit position. The contents of bit 0 are copied to the carry flag and bit 7.">rrc a</td>
</tr>
<tr>
<th>1</th>
<td axis="+0P0++|2|8|The contents of b are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl b</td>
<td axis="+0P0++|2|8|The contents of c are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl c</td>
<td axis="+0P0++|2|8|The contents of d are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl d</td>
<td axis="+0P0++|2|8|The contents of e are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl e</td>
<td axis="+0P0++|2|8|The contents of h are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl h</td>
<td axis="+0P0++|2|8|The contents of l are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl l</td>
<td axis="+0P0++|2|15|The contents of (hl) are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl (hl)</td>
<td axis="+0P0++|2|8|The contents of a are rotated left one bit position. The contents of bit 7 are copied to the carry flag and the previous contents of the carry flag are copied to bit 0.">rl a</td>
<td axis="+0P0++|2|8|The contents of b are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr b</td>
<td axis="+0P0++|2|8|The contents of c are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr c</td>
<td axis="+0P0++|2|8|The contents of d are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr d</td>
<td axis="+0P0++|2|8|The contents of e are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr e</td>
<td axis="+0P0++|2|8|The contents of h are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr h</td>
<td axis="+0P0++|2|8|The contents of l are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr l</td>
<td axis="+0P0++|2|15|The contents of (hl) are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr (hl)</td>
<td axis="+0P0++|2|8|The contents of a are rotated right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of the carry flag are copied to bit 7.">rr a</td>
</tr>
<tr>
<th>2</th>
<td axis="+0P0++|2|8|The contents of b are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla b</td>
<td axis="+0P0++|2|8|The contents of c are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla c</td>
<td axis="+0P0++|2|8|The contents of d are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla d</td>
<td axis="+0P0++|2|8|The contents of e are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla e</td>
<td axis="+0P0++|2|8|The contents of h are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla h</td>
<td axis="+0P0++|2|8|The contents of l are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla l</td>
<td axis="+0P0++|2|15|The contents of (hl) are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla (hl)</td>
<td axis="+0P0++|2|8|The contents of a are shifted left one bit position. The contents of bit 7 are copied to the carry flag and a zero is put into bit 0.">sla a</td>
<td axis="+0P0++|2|8|The contents of b are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra b</td>
<td axis="+0P0++|2|8|The contents of c are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra c</td>
<td axis="+0P0++|2|8|The contents of d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra d</td>
<td axis="+0P0++|2|8|The contents of e are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra e</td>
<td axis="+0P0++|2|8|The contents of h are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra h</td>
<td axis="+0P0++|2|8|The contents of l are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra l</td>
<td axis="+0P0++|2|15|The contents of (hl) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra (hl)</td>
<td axis="+0P0++|2|8|The contents of a are shifted right one bit position. The contents of bit 0 are copied to the carry flag and the previous contents of bit 7 are unchanged.">sra a</td>
</tr>
<tr>
<th>3</th>
<td class="un" axis="+0P0++|2|8|The contents of b are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll b</td>
<td class="un" axis="+0P0++|2|8|The contents of c are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll c</td>
<td class="un" axis="+0P0++|2|8|The contents of d are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll d</td>
<td class="un" axis="+0P0++|2|8|The contents of e are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll e</td>
<td class="un" axis="+0P0++|2|8|The contents of h are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll h</td>
<td class="un" axis="+0P0++|2|8|The contents of l are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll l</td>
<td class="un" axis="+0P0++|2|15|The contents of (hl) are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll (hl)</td>
<td class="un" axis="+0P0++|2|8|The contents of a are shifted left one bit position. The contents of bit 7 are put into the carry flag and a one is put into bit 0.">sll a</td>
<td axis="+0P0++|2|8|The contents of b are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl b</td>
<td axis="+0P0++|2|8|The contents of c are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl c</td>
<td axis="+0P0++|2|8|The contents of d are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl d</td>
<td axis="+0P0++|2|8|The contents of e are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl e</td>
<td axis="+0P0++|2|8|The contents of h are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl h</td>
<td axis="+0P0++|2|8|The contents of l are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl l</td>
<td axis="+0P0++|2|15|The contents of (hl) are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl (hl)</td>
<td axis="+0P0++|2|8|The contents of a are shifted right one bit position. The contents of bit 0 are copied to the carry flag and a zero is put into bit 7.">srl a</td>
</tr>
<tr>
<th>4</th>
<td axis="-0 1+ |2|8|Tests bit 0 of b.">bit 0,b</td>
<td axis="-0 1+ |2|8|Tests bit 0 of c.">bit 0,c</td>
<td axis="-0 1+ |2|8|Tests bit 0 of d.">bit 0,d</td>
<td axis="-0 1+ |2|8|Tests bit 0 of e.">bit 0,e</td>
<td axis="-0 1+ |2|8|Tests bit 0 of h.">bit 0,h</td>
<td axis="-0 1+ |2|8|Tests bit 0 of l.">bit 0,l</td>
<td axis="-0 1+ |2|12|Tests bit 0 of (hl).">bit 0,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 0 of a.">bit 0,a</td>
<td axis="-0 1+ |2|8|Tests bit 1 of b.">bit 1,b</td>
<td axis="-0 1+ |2|8|Tests bit 1 of c.">bit 1,c</td>
<td axis="-0 1+ |2|8|Tests bit 1 of d.">bit 1,d</td>
<td axis="-0 1+ |2|8|Tests bit 1 of e.">bit 1,e</td>
<td axis="-0 1+ |2|8|Tests bit 1 of h.">bit 1,h</td>
<td axis="-0 1+ |2|8|Tests bit 1 of l.">bit 1,l</td>
<td axis="-0 1+ |2|12|Tests bit 1 of (hl).">bit 1,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 1 of a.">bit 1,a</td>
</tr>
<tr>
<th>5</th>
<td axis="-0 1+ |2|8|Tests bit 2 of b.">bit 2,b</td>
<td axis="-0 1+ |2|8|Tests bit 2 of c.">bit 2,c</td>
<td axis="-0 1+ |2|8|Tests bit 2 of d.">bit 2,d</td>
<td axis="-0 1+ |2|8|Tests bit 2 of e.">bit 2,e</td>
<td axis="-0 1+ |2|8|Tests bit 2 of h.">bit 2,h</td>
<td axis="-0 1+ |2|8|Tests bit 2 of l.">bit 2,l</td>
<td axis="-0 1+ |2|12|Tests bit 2 of (hl).">bit 2,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 2 of a.">bit 2,a</td>
<td axis="-0 1+ |2|8|Tests bit 3 of b.">bit 3,b</td>
<td axis="-0 1+ |2|8|Tests bit 3 of c.">bit 3,c</td>
<td axis="-0 1+ |2|8|Tests bit 3 of d.">bit 3,d</td>
<td axis="-0 1+ |2|8|Tests bit 3 of e.">bit 3,e</td>
<td axis="-0 1+ |2|8|Tests bit 3 of h.">bit 3,h</td>
<td axis="-0 1+ |2|8|Tests bit 3 of l.">bit 3,l</td>
<td axis="-0 1+ |2|12|Tests bit 3 of (hl).">bit 3,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 3 of a.">bit 3,a</td>
</tr>
<tr>
<th>6</th>
<td axis="-0 1+ |2|8|Tests bit 4 of b.">bit 4,b</td>
<td axis="-0 1+ |2|8|Tests bit 4 of c.">bit 4,c</td>
<td axis="-0 1+ |2|8|Tests bit 4 of d.">bit 4,d</td>
<td axis="-0 1+ |2|8|Tests bit 4 of e.">bit 4,e</td>
<td axis="-0 1+ |2|8|Tests bit 4 of h.">bit 4,h</td>
<td axis="-0 1+ |2|8|Tests bit 4 of l.">bit 4,l</td>
<td axis="-0 1+ |2|12|Tests bit 4 of (hl).">bit 4,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 4 of a.">bit 4,a</td>
<td axis="-0 1+ |2|8|Tests bit 5 of b.">bit 5,b</td>
<td axis="-0 1+ |2|8|Tests bit 5 of c.">bit 5,c</td>
<td axis="-0 1+ |2|8|Tests bit 5 of d.">bit 5,d</td>
<td axis="-0 1+ |2|8|Tests bit 5 of e.">bit 5,e</td>
<td axis="-0 1+ |2|8|Tests bit 5 of h.">bit 5,h</td>
<td axis="-0 1+ |2|8|Tests bit 5 of l.">bit 5,l</td>
<td axis="-0 1+ |2|12|Tests bit 5 of (hl).">bit 5,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 5 of a.">bit 5,a</td>
</tr>
<tr>
<th>7</th>
<td axis="-0 1+ |2|8|Tests bit 6 of b.">bit 6,b</td>
<td axis="-0 1+ |2|8|Tests bit 6 of c.">bit 6,c</td>
<td axis="-0 1+ |2|8|Tests bit 6 of d.">bit 6,d</td>
<td axis="-0 1+ |2|8|Tests bit 6 of e.">bit 6,e</td>
<td axis="-0 1+ |2|8|Tests bit 6 of h.">bit 6,h</td>
<td axis="-0 1+ |2|8|Tests bit 6 of l.">bit 6,l</td>
<td axis="-0 1+ |2|12|Tests bit 6 of (hl).">bit 6,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 6 of a.">bit 6,a</td>
<td axis="-0 1+ |2|8|Tests bit 7 of b.">bit 7,b</td>
<td axis="-0 1+ |2|8|Tests bit 7 of c.">bit 7,c</td>
<td axis="-0 1+ |2|8|Tests bit 7 of d.">bit 7,d</td>
<td axis="-0 1+ |2|8|Tests bit 7 of e.">bit 7,e</td>
<td axis="-0 1+ |2|8|Tests bit 7 of h.">bit 7,h</td>
<td axis="-0 1+ |2|8|Tests bit 7 of l.">bit 7,l</td>
<td axis="-0 1+ |2|12|Tests bit 7 of (hl).">bit 7,(hl)</td>
<td axis="-0 1+ |2|8|Tests bit 7 of a.">bit 7,a</td>
</tr>
<tr>
<th>8</th>
<td axis="------|2|8|Resets bit 0 of b.">res 0,b</td>
<td axis="------|2|8|Resets bit 0 of c.">res 0,c</td>
<td axis="------|2|8|Resets bit 0 of d.">res 0,d</td>
<td axis="------|2|8|Resets bit 0 of e.">res 0,e</td>
<td axis="------|2|8|Resets bit 0 of h.">res 0,h</td>
<td axis="------|2|8|Resets bit 0 of l.">res 0,l</td>
<td axis="------|2|15|Resets bit 0 of (hl).">res 0,(hl)</td>
<td axis="------|2|8|Resets bit 0 of a.">res 0,a</td>
<td axis="------|2|8|Resets bit 1 of b.">res 1,b</td>
<td axis="------|2|8|Resets bit 1 of c.">res 1,c</td>
<td axis="------|2|8|Resets bit 1 of d.">res 1,d</td>
<td axis="------|2|8|Resets bit 1 of e.">res 1,e</td>
<td axis="------|2|8|Resets bit 1 of h.">res 1,h</td>
<td axis="------|2|8|Resets bit 1 of l.">res 1,l</td>
<td axis="------|2|15|Resets bit 1 of (hl).">res 1,(hl)</td>
<td axis="------|2|8|Resets bit 1 of a.">res 1,a</td>
</tr>
<tr>
<th>9</th>
<td axis="------|2|8|Resets bit 2 of b.">res 2,b</td>
<td axis="------|2|8|Resets bit 2 of c.">res 2,c</td>
<td axis="------|2|8|Resets bit 2 of d.">res 2,d</td>
<td axis="------|2|8|Resets bit 2 of e.">res 2,e</td>
<td axis="------|2|8|Resets bit 2 of h.">res 2,h</td>
<td axis="------|2|8|Resets bit 2 of l.">res 2,l</td>
<td axis="------|2|15|Resets bit 2 of (hl).">res 2,(hl)</td>
<td axis="------|2|8|Resets bit 2 of a.">res 2,a</td>
<td axis="------|2|8|Resets bit 3 of b.">res 3,b</td>
<td axis="------|2|8|Resets bit 3 of c.">res 3,c</td>
<td axis="------|2|8|Resets bit 3 of d.">res 3,d</td>
<td axis="------|2|8|Resets bit 3 of e.">res 3,e</td>
<td axis="------|2|8|Resets bit 3 of h.">res 3,h</td>
<td axis="------|2|8|Resets bit 3 of l.">res 3,l</td>
<td axis="------|2|15|Resets bit 3 of (hl).">res 3,(hl)</td>
<td axis="------|2|8|Resets bit 3 of a.">res 3,a</td>
</tr>
<tr>
<th>A</th>
<td axis="------|2|8|Resets bit 4 of b.">res 4,b</td>
<td axis="------|2|8|Resets bit 4 of c.">res 4,c</td>
<td axis="------|2|8|Resets bit 4 of d.">res 4,d</td>
<td axis="------|2|8|Resets bit 4 of e.">res 4,e</td>
<td axis="------|2|8|Resets bit 4 of h.">res 4,h</td>
<td axis="------|2|8|Resets bit 4 of l.">res 4,l</td>
<td axis="------|2|15|Resets bit 4 of (hl).">res 4,(hl)</td>
<td axis="------|2|8|Resets bit 4 of a.">res 4,a</td>
<td axis="------|2|8|Resets bit 5 of b.">res 5,b</td>
<td axis="------|2|8|Resets bit 5 of c.">res 5,c</td>
<td axis="------|2|8|Resets bit 5 of d.">res 5,d</td>
<td axis="------|2|8|Resets bit 5 of e.">res 5,e</td>
<td axis="------|2|8|Resets bit 5 of h.">res 5,h</td>
<td axis="------|2|8|Resets bit 5 of l.">res 5,l</td>
<td axis="------|2|15|Resets bit 5 of (hl).">res 5,(hl)</td>
<td axis="------|2|8|Resets bit 5 of a.">res 5,a</td>
</tr>
<tr>
<th>B</th>
<td axis="------|2|8|Resets bit 6 of b.">res 6,b</td>
<td axis="------|2|8|Resets bit 6 of c.">res 6,c</td>
<td axis="------|2|8|Resets bit 6 of d.">res 6,d</td>
<td axis="------|2|8|Resets bit 6 of e.">res 6,e</td>
<td axis="------|2|8|Resets bit 6 of h.">res 6,h</td>
<td axis="------|2|8|Resets bit 6 of l.">res 6,l</td>
<td axis="------|2|15|Resets bit 6 of (hl).">res 6,(hl)</td>
<td axis="------|2|8|Resets bit 6 of a.">res 6,a</td>
<td axis="------|2|8|Resets bit 7 of b.">res 7,b</td>
<td axis="------|2|8|Resets bit 7 of c.">res 7,c</td>
<td axis="------|2|8|Resets bit 7 of d.">res 7,d</td>
<td axis="------|2|8|Resets bit 7 of e.">res 7,e</td>
<td axis="------|2|8|Resets bit 7 of h.">res 7,h</td>
<td axis="------|2|8|Resets bit 7 of l.">res 7,l</td>
<td axis="------|2|15|Resets bit 7 of (hl).">res 7,(hl)</td>
<td axis="------|2|8|Resets bit 7 of a.">res 7,a</td>
</tr>
<tr>
<th>C</th>
<td axis="------|2|8|Sets bit 0 of b.">set 0,b</td>
<td axis="------|2|8|Sets bit 0 of c.">set 0,c</td>
<td axis="------|2|8|Sets bit 0 of d.">set 0,d</td>
<td axis="------|2|8|Sets bit 0 of e.">set 0,e</td>
<td axis="------|2|8|Sets bit 0 of h.">set 0,h</td>
<td axis="------|2|8|Sets bit 0 of l.">set 0,l</td>
<td axis="------|2|15|Sets bit 0 of (hl).">set 0,(hl)</td>
<td axis="------|2|8|Sets bit 0 of a.">set 0,a</td>
<td axis="------|2|8|Sets bit 1 of b.">set 1,b</td>
<td axis="------|2|8|Sets bit 1 of c.">set 1,c</td>
<td axis="------|2|8|Sets bit 1 of d.">set 1,d</td>
<td axis="------|2|8|Sets bit 1 of e.">set 1,e</td>
<td axis="------|2|8|Sets bit 1 of h.">set 1,h</td>
<td axis="------|2|8|Sets bit 1 of l.">set 1,l</td>
<td axis="------|2|15|Sets bit 1 of (hl).">set 1,(hl)</td>
<td axis="------|2|8|Sets bit 1 of a.">set 1,a</td>
</tr>
<tr>
<th>D</th>
<td axis="------|2|8|Sets bit 2 of b.">set 2,b</td>
<td axis="------|2|8|Sets bit 2 of c.">set 2,c</td>
<td axis="------|2|8|Sets bit 2 of d.">set 2,d</td>
<td axis="------|2|8|Sets bit 2 of e.">set 2,e</td>
<td axis="------|2|8|Sets bit 2 of h.">set 2,h</td>
<td axis="------|2|8|Sets bit 2 of l.">set 2,l</td>
<td axis="------|2|15|Sets bit 2 of (hl).">set 2,(hl)</td>
<td axis="------|2|8|Sets bit 2 of a.">set 2,a</td>
<td axis="------|2|8|Sets bit 3 of b.">set 3,b</td>
<td axis="------|2|8|Sets bit 3 of c.">set 3,c</td>
<td axis="------|2|8|Sets bit 3 of d.">set 3,d</td>
<td axis="------|2|8|Sets bit 3 of e.">set 3,e</td>
<td axis="------|2|8|Sets bit 3 of h.">set 3,h</td>
<td axis="------|2|8|Sets bit 3 of l.">set 3,l</td>
<td axis="------|2|15|Sets bit 3 of (hl).">set 3,(hl)</td>
<td axis="------|2|8|Sets bit 3 of a.">set 3,a</td>
</tr>
<tr>
<th>E</th>
<td axis="------|2|8|Sets bit 4 of b.">set 4,b</td>
<td axis="------|2|8|Sets bit 4 of c.">set 4,c</td>
<td axis="------|2|8|Sets bit 4 of d.">set 4,d</td>
<td axis="------|2|8|Sets bit 4 of e.">set 4,e</td>
<td axis="------|2|8|Sets bit 4 of h.">set 4,h</td>
<td axis="------|2|8|Sets bit 4 of l.">set 4,l</td>
<td axis="------|2|15|Sets bit 4 of (hl).">set 4,(hl)</td>
<td axis="------|2|8|Sets bit 4 of a.">set 4,a</td>
<td axis="------|2|8|Sets bit 5 of b.">set 5,b</td>
<td axis="------|2|8|Sets bit 5 of c.">set 5,c</td>
<td axis="------|2|8|Sets bit 5 of d.">set 5,d</td>
<td axis="------|2|8|Sets bit 5 of e.">set 5,e</td>
<td axis="------|2|8|Sets bit 5 of h.">set 5,h</td>
<td axis="------|2|8|Sets bit 5 of l.">set 5,l</td>
<td axis="------|2|15|Sets bit 5 of (hl).">set 5,(hl)</td>
<td axis="------|2|8|Sets bit 5 of a.">set 5,a</td>
</tr>
<tr>
<th>F</th>
<td axis="------|2|8|Sets bit 6 of b.">set 6,b</td>
<td axis="------|2|8|Sets bit 6 of c.">set 6,c</td>
<td axis="------|2|8|Sets bit 6 of d.">set 6,d</td>
<td axis="------|2|8|Sets bit 6 of e.">set 6,e</td>
<td axis="------|2|8|Sets bit 6 of h.">set 6,h</td>
<td axis="------|2|8|Sets bit 6 of l.">set 6,l</td>
<td axis="------|2|15|Sets bit 6 of (hl).">set 6,(hl)</td>
<td axis="------|2|8|Sets bit 6 of a.">set 6,a</td>
<td axis="------|2|8|Sets bit 7 of b.">set 7,b</td>
<td axis="------|2|8|Sets bit 7 of c.">set 7,c</td>
<td axis="------|2|8|Sets bit 7 of d.">set 7,d</td>
<td axis="------|2|8|Sets bit 7 of e.">set 7,e</td>
<td axis="------|2|8|Sets bit 7 of h.">set 7,h</td>
<td axis="------|2|8|Sets bit 7 of l.">set 7,l</td>
<td axis="------|2|15|Sets bit 7 of (hl).">set 7,(hl)</td>
<td axis="------|2|8|Sets bit 7 of a.">set 7,a</td>
</tr>
</table>
<div id="banner">
<a href="/asm/">
<span>one assembler to rule them all<br />~~~</span>
<img src="/asm/bar.png" alt="ORG ONLINE Z80 IDE" />
</a>
<cite>
<a href="/resources/">
<img src="/images/emblem.png" alt="ClrHome" />
</a>
<span>another web<br />resource by</span>
</cite>
<img src="banner.png" alt="" />
</div>
</div>
</body>
</html>
